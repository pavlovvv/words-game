#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include "api.h"
#include <random>
#include <algorithm>

using namespace std;

class WordsClassic : public WordsGame {

public:
    WordsClassic(Account &a, Mode m, Difficulty d, string fn) : WordsGame(a, m, d, fn) {}

    void runWordsClassic() {
        API api;
        int count = 2;
        string words = api.apiRequest(
                "–ú–∏ –≥—Ä–∞—î–º–æ –≤ —Å–ª–æ–≤–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –î–∞–π –º–µ–Ω—ñ —Ä–∞–Ω–¥–æ–º–Ω–∏—Ö 15 —Ä–∞–Ω–¥–æ–º–Ω–∏—Ö —ñ–º–µ–Ω–Ω–∏–∫—ñ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, –±–µ–∑ –∫–æ–º–∏, –Ω—ñ—á–æ–≥–æ –∫—Ä—ñ–º —Ü—å–æ–≥–æ –Ω–µ –ø–∏—à–∏. –°–ª–æ–≤–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ –∑–∞ 10 —Å–∏–º–≤–æ–ª—ñ–≤. –£–Ω–∏–∫–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω—å. –ö–æ–∂–Ω–µ —Å–ª–æ–≤–æ –ø–æ–≤–∏–Ω–Ω–æ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏");
        again3:
        ofstream fout("input.txt");
        fout << words << endl;
        runGame();
        shuffledWord = shuffleUTF8Word(currentWord);
        int attempts = getAttempts();
        string hint = "-";
        again:
        int credits = account.getCredits();
        view.printCurrentAttemptTable(shuffledWord, attempts, hint, credits);

        string inputword;
        cout << "–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ, –∞–±–æ \"–ø—ñ–¥–∫–∞–∑–∫–∞\": ";
        cin >> inputword;
        if (inputword == "–ø—ñ–¥–∫–∞–∑–∫–∞") {
            if (credits >= 25) {
                hint = api.apiRequest(
                        "–ú–∏ –≥—Ä–∞—î–º–æ –≤ —Å–ª–æ–≤–∞. –ó—Ä–æ–±–∏ –ø—ñ–¥–∫–∞–∑–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫—É—é –º–æ–≤–æ—é –¥–æ 35 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–æ —Å–ª–æ–≤–∞ " + currentWord);
                account.setCredits(credits - 25);
            } else {
                cout
                        << "‚ö†\uFE0F‚ö†\uFE0F‚ö†\uFE0F–ù–∞ –∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤. –ö—É–ø–∏—Ç–∏ —ó—Ö –º–æ–∂–Ω–∞, –∑–∞–¥–æ–Ω–∞—Ç–∏–≤—à–∏ –Ω–∞ –∫–∞—Ä—Ç—É 5355571113731129. –ü—ñ—Å–ª—è –¥–æ–Ω–∞—Ç—É –ø–∏—à–µ—Ç–µ –≤ –¢–ì –∑–∞ –Ω–æ–º–µ—Ä–æ–º 0508641813, –∫–∏–¥–∞—î—Ç–µ —Å–∫—Ä—ñ–Ω –æ–ø–ª–∞—Ç–∏. 100 –∫—Ä–µ–¥–∏—Ç—ñ–≤ = 100–≥—Ä–Ω. –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∏ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –Ω–∞ –∞–∫–∞—É–Ω—Ç. –ö–æ–ª–∏—Å—å.üòòüòòüòòüòÜüòÜüòÜ:-):-)^_^(‚î¨‚î¨Ôπè‚î¨‚î¨)(‚î¨‚î¨Ôπè‚î¨‚î¨)(‚î¨‚î¨Ôπè‚î¨‚î¨)(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª‚ö†\uFE0F‚ö†\uFE0F‚ö†\uFE0F"
                        << endl;
            }
            goto again;
        }
        if (inputword == currentWord) {
            cout << "–í–∏ –≤–≥–∞–¥–∞–ª–∏!!!!" << endl;
            if (difficulty == Easy) {
                account.endGame(true, credits + 5);
            } else if (difficulty == Medium) {
                account.endGame(true, credits + 15);
            } else {
                account.endGame(true, credits + 25);
            }
        } else {
            if (attempts == 1) {
                cout << "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏! –õ–æ—à–∞—Ä–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–¥–ø–æ–≤—ñ–¥—å: " << currentWord << endl;
                account.endGame(false, credits);
            } else {
                cout << "–í–∏ –Ω–µ –≤–≥–∞–¥–∞–ª–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑." << endl;
                attempts--;
                goto again;
            }
        }
        count++;
        if (count < 15) {
            string choice;
            cout << "–ß–∏ –±–∞–∂–∞—î—Ç–µ –≤–∏ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (yes/no): ";
            cin >> choice;
            if (tolower(choice[0]) == 'y') {
                goto again3;
            }
        }
    }

    vector<string> splitUTF8String(const string &str) {
        vector<string> utf8Chars;
        for (size_t i = 0; i < str.size();) {
            size_t len = 1;
            if ((str[i] & 0x80) == 0x00) {
                len = 1; // 1-byte character (ASCII)
            } else if ((str[i] & 0xE0) == 0xC0) {
                len = 2; // 2-byte character
            } else if ((str[i] & 0xF0) == 0xE0) {
                len = 3; // 3-byte character
            } else if ((str[i] & 0xF8) == 0xF0) {
                len = 4; // 4-byte character
            }
            utf8Chars.push_back(str.substr(i, len));
            i += len;
        }
        return utf8Chars;
    }

    string shuffleUTF8Word(const string &str) {
        vector<string> utf8Chars = splitUTF8String(str);
        random_device rd;
        mt19937 g(rd());
        shuffle(utf8Chars.begin(), utf8Chars.end(), g);
        string shuffledStr;
        for (const auto &ch: utf8Chars) {
            shuffledStr += ch;
        }
        return shuffledStr;
    }
};
