#include "wordsHangman.h"

WordsHangman::WordsHangman(Account &a, Difficulty d, string fn) : WordsGame(a, d, fn) {}

void WordsHangman::runWordsHangman() {
    int count = 2;
    string words = api.apiRequest(
            "–ú–∏ –≥—Ä–∞—î–º–æ –≤ —Å–ª–æ–≤–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –î–∞–π –º–µ–Ω—ñ —Ä–∞–Ω–¥–æ–º–Ω–∏—Ö 15 —Ä–∞–Ω–¥–æ–º–Ω–∏—Ö —ñ–º–µ–Ω–Ω–∏–∫—ñ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, –±–µ–∑ –∫–æ–º–∏, –Ω—ñ—á–æ–≥–æ –∫—Ä—ñ–º —Ü—å–æ–≥–æ –Ω–µ –ø–∏—à–∏. –°–ª–æ–≤–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ –∑–∞ 10 —Å–∏–º–≤–æ–ª—ñ–≤. –£–Ω–∏–∫–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω—å. –ö–æ–∂–Ω–µ —Å–ª–æ–≤–æ –ø–æ–≤–∏–Ω–Ω–æ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏");
    again3:
    ofstream fout("input.txt");
    fout << words << endl;
    runGame();
    int attempts = getAttempts();
    vector<string> currentWordChars = splitUTF8String(currentWord);
    vector<string> guessedWord(currentWordChars.size(), "-");
    unordered_set<string> guessedLetters;
    string hint = "-";
    again:
    int credits = account.getCredits();
    string guessedWordStr;
    for (const auto &ch : guessedWord) {
        guessedWordStr += ch;
    }
    view.printCurrentAttemptTable(guessedWordStr, attempts, hint, credits);

    string input;
    cout << "–í–≤–µ–¥–∏ –±—É–∫–≤—É, –∞–±–æ \"–ø—ñ–¥–∫–∞–∑–∫–∞\": ";
    cin >> input;

    if (input == "–ø—ñ–¥–∫–∞–∑–∫–∞") {
        if (credits >= 25) {
            hint = api.apiRequest(
                    "–ú–∏ –≥—Ä–∞—î–º–æ –≤ —à–∏–±–µ–Ω–∏—Ü—é. –ó—Ä–æ–±–∏ –ø—ñ–¥–∫–∞–∑–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –¥–æ 35 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–æ —Å–ª–æ–≤–∞ " + currentWord);
            account.setCredits(credits - 25);
        } else {
            cout
                    << "‚ö†\uFE0F‚ö†\uFE0F‚ö†\uFE0F–ù–∞ –∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤.üòòüòòüòòüòÜüòÜüòÜ:-):-)^_^(‚î¨‚î¨Ôπè‚î¨‚î¨)(‚î¨‚î¨Ôπè‚î¨‚î¨)(‚î¨‚î¨Ôπè‚î¨‚î¨)(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª‚ö†\uFE0F‚ö†\uFE0F‚ö†\uFE0F"
                    << endl;
        }
        goto again;
    }

    vector<string> utf8Chars = splitUTF8String(input);
    if (utf8Chars.size() != 1) {
        cout << "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω—É –±—É–∫–≤—É." << endl;
        goto again;
    }

    string guess = utf8Chars[0];
    if (guessedLetters.count(guess)) {
        cout << "–í–∏ –≤–∂–µ –≤–≥–∞–¥—É–≤–∞–ª–∏ —Ü—é –±—É–∫–≤—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑." << endl;
        goto again;
    }

    guessedLetters.insert(guess);
    bool correctGuess = false;
    for (size_t i = 0; i < currentWordChars.size(); ++i) {
        if (currentWordChars[i] == guess) {
            guessedWord[i] = guess;
            correctGuess = true;
        }
    }

    if (!correctGuess) {
        attempts--;
        cout << "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å! –ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: " << attempts << endl;
    }

    guessedWordStr.clear();
    for (const auto &ch : guessedWord) {
        guessedWordStr += ch;
    }

    if (guessedWordStr == currentWord) {
        winGame();
    } else if (attempts == 0) {
        cout << "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: " << currentWord << endl;
        account.endGame(false, credits);
    } else {
        goto again;
    }

    count++;
    if (count < 15) {
        string choice;
        cout << "–ß–∏ –±–∞–∂–∞—î—Ç–µ –≤–∏ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (yes/no): ";
        cin >> choice;
        if (tolower(choice[0]) == 'y') {
            system("clear");
            goto again3;
        }
    }
}


vector<string> WordsHangman::splitUTF8String(const string &str) {
    vector<string> utf8Chars;
    for (size_t i = 0; i < str.size();) {
        size_t len = 1;
        if ((str[i] & 0x80) == 0x00) {
            len = 1; // 1-byte character (ASCII)
        } else if ((str[i] & 0xE0) == 0xC0) {
            len = 2; // 2-byte character
        } else if ((str[i] & 0xF0) == 0xE0) {
            len = 3; // 3-byte character
        } else if ((str[i] & 0xF8) == 0xF0) {
            len = 4; // 4-byte character
        }
        utf8Chars.push_back(str.substr(i, len));
        i += len;
    }
    return utf8Chars;
}