#include "wordsHidden.h"

WordsHidden::WordsHidden(Account &a, Difficulty d, string fn) : WordsGame(a, d, fn) {}

void WordsHidden::runWordsHidden() {
    string words = api.apiRequest(
            "–ú–∏ –≥—Ä–∞—î–º–æ –≤ —Å–ª–æ–≤–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –î–∞–π –º–µ–Ω—ñ —Ä–∞–Ω–¥–æ–º–Ω–∏—Ö 15 —Ä–∞–Ω–¥–æ–º–Ω–∏—Ö —ñ–º–µ–Ω–Ω–∏–∫—ñ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, –±–µ–∑ –∫–æ–º–∏, –Ω—ñ—á–æ–≥–æ –∫—Ä—ñ–º —Ü—å–æ–≥–æ –Ω–µ –ø–∏—à–∏. –°–ª–æ–≤–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ –∑–∞ 10 —Å–∏–º–≤–æ–ª—ñ–≤. –£–Ω–∏–∫–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω—å. –ö–æ–∂–Ω–µ —Å–ª–æ–≤–æ –ø–æ–≤–∏–Ω–Ω–æ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏");
    again3:
    ofstream fout("input.txt");
    fout << words << endl;
    runGame();
    shuffledWord = shuffleUTF8Word(currentWord);
    string hint = "-";
    again:
    int credits = account.getCredits();
    view.printCurrentAttemptTable(shuffledWord, getAttempts(), hint, credits);
    string inputword;
    cout << "–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ, –∞–±–æ \"–ø—ñ–¥–∫–∞–∑–∫–∞\": ";
    cin >> inputword;
    if (inputword == "–ø—ñ–¥–∫–∞–∑–∫–∞") {
        if (credits >= 25) {
            hint = api.apiRequest(
                    "–ú–∏ –≥—Ä–∞—î–º–æ –≤ —Å–ª–æ–≤–∞. –ó—Ä–æ–±–∏ –ø—ñ–¥–∫–∞–∑–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫—É—é –º–æ–≤–æ—é –¥–æ 35 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–æ —Å–ª–æ–≤–∞ " + currentWord);
            account.setCredits(credits - 25);
        } else {
            cout
                    << "‚ö†\uFE0F‚ö†\uFE0F‚ö†\uFE0F–ù–∞ –∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤.üòòüòòüòòüòÜüòÜüòÜ:-):-)^_^(‚î¨‚î¨Ôπè‚î¨‚î¨)(‚î¨‚î¨Ôπè‚î¨‚î¨)(‚î¨‚î¨Ôπè‚î¨‚î¨)(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª‚ö†\uFE0F‚ö†\uFE0F‚ö†\uFE0F"
                    << endl;
        }
        goto again;
    }
    if (inputword == currentWord) {
        winGame();
    } else {
        if (attempts == 1) {
            cout << "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–¥–ø–æ–≤—ñ–¥—å: " << currentWord << endl;
            account.endGame(false, credits);
        } else {
            cout << "–í–∏ –Ω–µ –≤–≥–∞–¥–∞–ª–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑." << endl;
            attempts--;
            goto again;
        }
    }
    count++;
    if (count < 15) {
        string choice;
        cout << "–ß–∏ –±–∞–∂–∞—î—Ç–µ –≤–∏ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (yes/no): ";
        cin >> choice;
        if (tolower(choice[0]) == 'y') {
            system("clear");
            goto again3;
        }
    }
}

vector<string> WordsHidden::splitUTF8String(const string &str) {
    vector<string> utf8Chars;
    for (size_t i = 0; i < str.size();) {
        size_t len = 1;
        if ((str[i] & 0x80) == 0x00) {
            len = 1; // 1-byte character (ASCII)
        } else if ((str[i] & 0xE0) == 0xC0) {
            len = 2; // 2-byte character
        } else if ((str[i] & 0xF0) == 0xE0) {
            len = 3; // 3-byte character
        } else if ((str[i] & 0xF8) == 0xF0) {
            len = 4; // 4-byte character
        }
        utf8Chars.push_back(str.substr(i, len));
        i += len;
    }
    return utf8Chars;
}

string WordsHidden::shuffleUTF8Word(const string &str) {
    vector<string> utf8Chars = splitUTF8String(str);
    random_device rd;
    mt19937 g(rd());
    shuffle(utf8Chars.begin(), utf8Chars.end(), g);
    string shuffledStr;
    int size = utf8Chars.size();
    double k = size / 4.0;
    vector<int> changedIndexes;
    if (k > 0 && k <= 1) {
        changeRandomChar(utf8Chars, changedIndexes, g, 1);
    } else if (k > 1 && k <= 2) {
        changeRandomChar(utf8Chars, changedIndexes, g, 2);
    } else if (k > 2 && k <= 3) {
        changeRandomChar(utf8Chars, changedIndexes, g, 3);
    } else if (k > 3 && k <= 4) {
        changeRandomChar(utf8Chars, changedIndexes, g, 4);
    } else if (k > 4 && k <= 5) {
        changeRandomChar(utf8Chars, changedIndexes, g, 5);
    }
    for (const auto &ch : utf8Chars) {
        shuffledStr += ch;
    }
    return shuffledStr;
}

void WordsHidden::changeRandomChar(vector<string> &utf8Chars, vector<int> &changedIndices, mt19937 &g, int n) {
    for (int i = 0; i < n; i++) {
        uniform_int_distribution<> dis(0, utf8Chars.size() - 1);
        int index;
        do {
            index = dis(g);
        } while (find(changedIndices.begin(), changedIndices.end(), index) != changedIndices.end());
        utf8Chars[index] = "*";
        changedIndices.push_back(index);
    }
}
